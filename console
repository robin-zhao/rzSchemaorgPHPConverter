<?php
/**
 * This is a command line script to generate php classes from http://schema.rdfs.org/all.json
 *
 * @author Jian Zhao
 *
 * @email boborabit@gmail.com
 */

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

require 'vendor/autoload.php';

$app = new Application();

$cmd = $app->register('convert');
$cmd->addOption('namespace', null,  InputOption::VALUE_REQUIRED, 'Specify a custom namespace like Robin\\SchemaOrg');
$cmd->setDescription('Start to convert http://schema.rdfs.org/all.json to classes.');
$cmd->setCode(function(InputInterface $input, OutputInterface $output) {

    // get json object from http://schema.rdfs.org/all.json
    $url = 'http://schema.rdfs.org/all.json';
    $localFile = __DIR__ . '/all.json';
    if (!file_exists($localFile) || filemtime($localFile) + 86400 < time()) {
        file_put_contents($localFile, file_get_contents($url));
    }

    $json = json_decode(file_get_contents($localFile));

    ClassBuilder::setPropertyConf($json->properties);
    ClassBuilder::setTypeConf($json->types);

    $namespace = 'Robinzhao\\SchemaOrg';
    $inputNamespace = $input->getOption('namespace');
    if ($inputNamespace) {
        $namespace = $inputNamespace;
    }

    foreach ((array) $json->types as $each) {
        $classBuilder = new ClassBuilder($each);
        $classBuilder->setRootNamespace($namespace);
        $classBuilder->build();
    }
});

$app->run();

class ClassBuilder
{

    private $rootNamespace = 'Robinzhao\\SchemaOrg';
    private $className;
    private $ancestors;
    private $specificProperties;
    private $label;
    private $file;
    private $url;
    private static $propertyConf = array();
    private static $typeConf;

    private $typeMapper = array(
        'text' => 'String',
        'url' => 'String',
        'time' => 'DateTime',
        'date' => 'DateTime',
        'boolean' => 'Boolean',
        'datetime' => 'DateTime',
        'float' => 'Float',
        'integer' => 'Integer',
        'number' => 'Float',
    );

    public static function setPropertyConf($properties)
    {
        static::$propertyConf = $properties;
    }
    public static function setTypeConf($type)
    {
        static::$typeConf = $type;
    }

    public function __construct($object)
    {
        $this->className = $object->id;
        $this->ancestors = $object->ancestors;
        $this->specificProperties = $object->specific_properties;
        $this->label = $object->label;
        $this->context = $object->url;
        
    }

    public function setRootNamespace($rootNamespace)
    {
        $this->rootNamespace = $rootNamespace;
    }

    public function build()
    {
        $this->touchFile();
        $this->buildClass();
    }

    private function namespaceToPath($namespace)
    {
        $namespace = str_replace('\\', '/', $namespace);
        return $namespace;
    }

    private function touchFile()
    {
        $dir = __DIR__ . '/' . $this->namespaceToPath($this->rootNamespace) . '/' . implode('/', $this->ancestors);
        if (!file_exists($dir)) {
            mkdir($dir, 0755, true);
        }

        $this->file = $dir . '/' . $this->className . '.php';
        touch($this->file);
    }

    private function buildClass()
    {
        $string = array();
        $string [] = '<?php';
        $string [] = '/**';
        $string [] = ' * This is an auto generated file.';
        $string [] = ' */' . "\n";

        if (count($this->ancestors) > 0) {
            $string [] = 'namespace ' . $this->rootNamespace . '\\' . implode('\\', $this->ancestors) . ';' . "\n";
            $string [] = 'use ' . $this->rootNamespace . '\\' . implode('\\', $this->ancestors) . ';' . "\n";
            $this->buildClassDoc($string);
            $string [] = 'class ' . $this->className . ' extends ' . $this->ancestors[count($this->ancestors) - 1];
        } else {
            $string [] = 'namespace ' . $this->rootNamespace . ";\n";
            $this->buildClassDoc($string);
            $string [] = 'class ' . $this->className;
        }
        $string[] = '{' . "\n";

        $getterSetter = array();

        foreach ($this->specificProperties as $property) {
            $this->buildProperty($property, $string);
            $this->buildAdder($property, $getterSetter);
        }

        $this->buildContext($string);

        $string = array_merge($string, $getterSetter);

        $string = implode("\n", $string) . "\n";

        $this->buildFormatMethod($string);

        $string .= "}\n";

        file_put_contents($this->file, $string);
    }

    private function buildClassDoc(&$string)
    {
        $string [] = '/**';
        $string [] = ' * ' . $this->label;
        $string [] = ' * ' . $this->context;
        $string [] = ' */';
    }

    private function buildContext(&$string)
    {
        $string [] = '    /**';
        $string [] = '     * schema.org context url';
        $string [] = '     * @var String';
        $string [] = '     */';
        $string [] = '    public $context = "' . $this->context . '";' . "\n";

    }

    private function buildProperty($property, &$string)
    {
        $string [] = '    /**';
        $string [] = '     * ' . self::$propertyConf->$property->comment_plain;
        $string [] = '     *';

        $type = $this->calculateType($property);
        $string [] = '     * @var ' . $type;
        $string [] = '     */';
        $string [] = '    public $' . $property . ';' . "\n";
    }

    private function calculateType($property)
    {
        $ranges = self::$propertyConf->$property->ranges;
        $rangeName = array();
        foreach ($ranges as $range) {
            if (array_key_exists(strtolower($range), $this->typeMapper)) {
                $rangeName [] = $this->typeMapper[strtolower($range)];
            } else {
                $ancestors = self::$typeConf->$range->ancestors;
                $ancestors[] = $range;
                if (count($ancestors) > 0) {
                    $namespace = $this->rootNamespace . '\\' . implode('\\', $ancestors);
                } else {
                    $namespace = $this->rootNamespace;
                }

                $rangeName [] = $namespace;
            }
        }
        $rangeName = array_unique($rangeName);
        return implode('|', $rangeName);
    }

    private function buildAdder($property, &$adder)
    {
        $type = $this->calculateType($property);

        $adder [] = '    /**';
        $adder [] = '     * @param $' . $property . ' ' . $type;
        $adder [] = '     */';
        $adder [] = '    public function add' . ucfirst($property) . '($' . $property . ')';
        $adder [] = '    {';
        $adder [] = '        $this->' . $property . ' []= $' . $property . ';';
        $adder [] = '        return $this;';
        $adder [] = '    }' . "\n";
    }


    private function buildFormatMethod(&$string)
    {
        if ($this->className == 'Thing')
        {
            $string .= <<<'FORMAT'
    protected $json;

    public function format($topLevel = true)
    {
        $this->json = new \stdClass();

        $reflectionClass = new \ReflectionClass($this);
        $properties = $reflectionClass->getProperties();
        foreach ($properties as $property) {

            if ($property->name == 'json') {
                continue;
            }

            $propertyValue = $this->{$property->name};
            if (!is_null($propertyValue)) {

                if ($property->name == 'context') {

                    $parts = explode('/', $propertyValue);
                    $type = array_pop($parts);

                    if ($topLevel) {
                        $context = implode('/', $parts);
                        $label = '@context';
                        $this->json->{$label} = $context;
                    }

                    $label = '@type';
                    $this->json->{$label} = $type;
                } else {
                    // Text based property.
                    $doc = $property->getDocComment();
                    $match = array();
                    preg_match('/@var ([a-zA-Z\\\\]+)/', $doc, $match);

                    switch ($match[1]) {
                        case 'String':
                            if (count($propertyValue) > 1) {
                                $this->json->{$property->name} = $propertyValue;
                            } else {
                                $this->json->{$property->name} = current($propertyValue);
                            }
                            break;
                        case 'Integer':
                        case 'float':
                            throw new Exception('no implemented');
                        default:
                            if (count($propertyValue) > 1) {
                                foreach ($propertyValue as $each) {
                                    $this->json->{$property->name} [] = $each->format(false);
                                }
                            } else {
                                $object = current($propertyValue);
                                $this->json->{$property->name} = $object->format(false);
                            }
                            break;
                    }
                }
            }
        }

        return $this->json;
    }

    public function toJson() {
        $this->format();
        return json_encode($this->json);
    }
FORMAT;

        }
    }
}